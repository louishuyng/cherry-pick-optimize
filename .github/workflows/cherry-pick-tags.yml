name: Cherry Pick Missing Tags
on:
  workflow_dispatch:
    inputs:
      tag_prefix:
        description: 'Tag prefix to search for (e.g., REG-1234)'
        required: true
        type: string
      target_branch:
        description: 'Target branch to cherry-pick into'
        required: true
        type: choice
        options:
          - staging
        default: staging
      source_branch:
        description: 'Source branch to cherry-pick from'
        required: true
        type: choice
        options:
          - main
        default: main
jobs:
  cherry-pick-missing-tags:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Setup and find missing tags
        id: find-missing
        run: |
          set -e

          # Fetch all data
          git fetch --all --tags
          git checkout ${{ inputs.target_branch }}
          git pull origin ${{ inputs.target_branch }}

          echo "Searching for tags with prefix: ${{ inputs.tag_prefix }}"

          # Get tags with specified prefix from both branches
          source_tags=$(git tag --merged origin/${{ inputs.source_branch }} | grep "^${{ inputs.tag_prefix }}\." | sort -V || true)
          target_tags=$(git tag --merged origin/${{ inputs.target_branch }} | grep "^${{ inputs.tag_prefix }}\." | sort -V || true)

          echo "Source tags: $source_tags"
          echo "Target tags: $target_tags"

          # Find missing tags
          missing_tags=""
          if [ -n "$source_tags" ]; then
            for tag in $source_tags; do
              if ! echo "$target_tags" | grep -q "^$tag$"; then
                missing_tags="$missing_tags$tag "
              fi
            done
          fi

          missing_tags=$(echo $missing_tags | xargs)  # trim whitespace

          if [ -n "$missing_tags" ]; then
            echo "has_missing=true" >> $GITHUB_OUTPUT
            # Sort missing tags by version number (small to large)
            sorted_tags=$(echo "$missing_tags" | tr ' ' '\n' | sort -V | tr '\n' ' ')
            echo "sorted_tags=$sorted_tags" >> $GITHUB_OUTPUT
            echo "missing_count=$(echo $missing_tags | wc -w)" >> $GITHUB_OUTPUT
            echo "Found missing tags (will be processed in version order): $missing_tags"
          else
            echo "has_missing=false" >> $GITHUB_OUTPUT
            echo "missing_count=0" >> $GITHUB_OUTPUT
            echo "No missing tags found"
          fi
      - name: Cherry-pick missing tags
        id: cherry-pick
        if: steps.find-missing.outputs.has_missing == 'true'
        run: |
          set -e

          BASE_BRANCH_NAME="cherry-pick/${{ inputs.tag_prefix }}-to-${{ inputs.target_branch }}"
          BRANCH_NAME="$BASE_BRANCH_NAME"

          # Check if branch already exists and add suffix if needed
          counter=1
          while git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; do
            BRANCH_NAME="${BASE_BRANCH_NAME}-${counter}"
            counter=$((counter + 1))
          done

          echo "üåø Creating new branch: $BRANCH_NAME from ${{ inputs.target_branch }}"
          git checkout -b "$BRANCH_NAME" origin/${{ inputs.target_branch }}

          echo "üìã Processing missing tags (sorted by version order)..."
          success_tags=""
          conflicted_tags=""
          failed_tags=""
          total_tags=0

          # Process tags from the sorted list (version order: small to large)
          for tag in ${{ steps.find-missing.outputs.sorted_tags }}; do
            if [ -n "$tag" ]; then
              total_tags=$((total_tags + 1))
              echo ""
              echo "üè∑Ô∏è  Processing tag [$total_tags]: $tag"
              
              # Get the commit hash for this tag
              tag_commit=$(git rev-list -n 1 "$tag")
              echo "   Commit: $tag_commit"
              
              # Attempt cherry-pick
              if git cherry-pick "$tag_commit"; then
                echo "   ‚úÖ Successfully cherry-picked $tag"
                success_tags="$success_tags$tag "
              else
                # Check if it's a merge conflict or other error
                if git status --porcelain | grep -q "^UU\|^AA\|^DD\|^AU\|^UA\|^DU\|^UD"; then
                  echo "   ‚ö†Ô∏è  Merge conflict detected for $tag"
                  echo "   üìù Committing conflict markers for manual resolution..."
                  
                  # Add all files (including conflicted ones)
                  git add .
                  
                  # Create a commit with conflict markers
                  git commit -m "Cherry-pick $tag (CONFLICTS - manual resolution needed)
                  
          Original commit: $tag_commit
          Tag: $tag

          ‚ö†Ô∏è  This commit contains merge conflicts that need manual resolution.
          Conflicted files are marked with <<<<<<< HEAD, =======, and >>>>>>> markers.
          Please resolve conflicts and amend this commit."
                  
                  echo "   ‚úÖ Committed with conflict markers for $tag"
                  conflicted_tags="$conflicted_tags$tag "
                else
                  echo "   ‚ùå Failed to cherry-pick $tag (non-conflict error)"
                  failed_tags="$failed_tags$tag "
                  git cherry-pick --abort || true
                fi
              fi
            fi
          done

          # Store results in output variables
          echo "success_tags=$success_tags" >> $GITHUB_OUTPUT
          echo "conflicted_tags=$conflicted_tags" >> $GITHUB_OUTPUT
          echo "failed_tags=$failed_tags" >> $GITHUB_OUTPUT

          success_count=$(echo $success_tags | wc -w)
          conflicted_count=$(echo $conflicted_tags | wc -w)
          failed_count=$(echo $failed_tags | wc -w)
          processed_count=$((success_count + conflicted_count))

          echo ""
          echo "üìä Cherry-pick Summary:"
          echo "   Total processed: $total_tags"
          echo "   ‚úÖ Successful: $success_count"
          echo "   ‚ö†Ô∏è  With conflicts: $conflicted_count"
          echo "   ‚ùå Failed: $failed_count"

          if [ $processed_count -gt 0 ]; then
            echo ""
            echo "üöÄ Pushing branch to remote..."
            git push origin "$BRANCH_NAME"
            echo "branch_created=true" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "‚úÖ Branch pushed successfully!"
          else
            echo "‚ùå No successful cherry-picks or conflicts to resolve, not creating branch"
            echo "branch_created=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Create Pull Request
        if: steps.find-missing.outputs.has_missing == 'true'
        run: |
          success_tags="${{ steps.cherry-pick.outputs.success_tags }}"
          conflicted_tags="${{ steps.cherry-pick.outputs.conflicted_tags }}"
          failed_tags="${{ steps.cherry-pick.outputs.failed_tags }}"
          success_count=$(echo $success_tags | wc -w)
          conflicted_count=$(echo $conflicted_tags | wc -w)
          failed_count=$(echo $failed_tags | wc -w)

          # Build PR body dynamically
          pr_body="## Cherry-pick Summary

          This PR cherry-picks missing tags with prefix \`${{ inputs.tag_prefix }}\` from \`${{ inputs.source_branch }}\` to \`${{ inputs.target_branch }}\`.

          ### Results
          - ‚úÖ Successful: $success_count
          - ‚ö†Ô∏è  With conflicts: $conflicted_count
          - ‚ùå Failed: $failed_count

          ### Configuration
          - **Tag prefix**: \`${{ inputs.tag_prefix }}\`
          - **Source branch**: \`${{ inputs.source_branch }}\`
          - **Target branch**: \`${{ inputs.target_branch }}\`"

          # Add successful tags section
          if [ -n "$success_tags" ]; then
            pr_body="$pr_body

          ### Successfully cherry-picked:
          \`\`\`
          $(echo "$success_tags" | tr ' ' '\n')
          \`\`\`"
          fi

          # Add conflicted tags section
          if [ -n "$conflicted_tags" ]; then
            pr_body="$pr_body

          ### Tags with conflicts (‚ö†Ô∏è  MANUAL RESOLUTION REQUIRED):
          \`\`\`
          $(echo "$conflicted_tags" | tr ' ' '\n')
          \`\`\`

          **üîß How to resolve conflicts:**
          1. Check out this PR branch locally
          2. Look for commits with \"CONFLICTS\" in the message
          3. Find files with conflict markers: \`<<<<<<<\`, \`=======\`, \`>>>>>>>\`
          4. Resolve conflicts by choosing the correct code
          5. Remove conflict markers
          6. Stage the resolved files: \`git add <file>\`
          7. Amend the conflict commit: \`git commit --amend\`
          8. Push the changes: \`git push --force-with-lease\`

          **üîç Find conflicted files:**
          \`\`\`bash
          # Search for conflict markers in the repository
          grep -r \"<<<<<<< HEAD\" .
          grep -r \"=======\" .
          grep -r \">>>>>>>\" .
          \`\`\`"
          fi

          # Add failed tags section
          if [ -n "$failed_tags" ]; then
            pr_body="$pr_body

          ### Failed tags (non-conflict errors):
          \`\`\`
          $(echo "$failed_tags" | tr ' ' '\n')
          \`\`\`

          These tags failed due to non-conflict errors and were not included in this PR. Manual investigation may be required."
          fi

          pr_body="$pr_body

          ---
          ü§ñ *Auto-generated by Cherry Pick workflow*"

          # Create the PR using GitHub CLI
          gh pr create \
            --title "Cherry-pick ${{ inputs.tag_prefix }}.* tags to ${{ inputs.target_branch }}" \
            --body "$pr_body" \
            --base "${{ inputs.target_branch }}" \
            --head "${{ steps.cherry-pick.outputs.branch_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: No missing tags
        if: steps.find-missing.outputs.has_missing == 'false'
        run: |
          echo "‚úÖ No missing tags found!"
          echo "All tags with prefix '${{ inputs.tag_prefix }}' are already in '${{ inputs.target_branch }}'."
